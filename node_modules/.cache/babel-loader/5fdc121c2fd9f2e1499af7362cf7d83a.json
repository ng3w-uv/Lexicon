{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mac/Desktop/Lexicon/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Container, Switch, withStyles } from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Definitions from \"./components/Definitions/Definitions\";\nimport Footer from \"./components/Footer/Footer\";\nimport Header from \"./components/Header/Header\";\n\nfunction App() {\n  _s();\n\n  const [word, setWord] = useState(\"\");\n  const [meanings, setMeanings] = useState([]);\n  const [category, setCategory] = useState(\"en\");\n  const [LightTheme, setLightTheme] = useState(false);\n\n  const dictionaryApi = async () => {\n    try {\n      const data = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`);\n      setMeanings(data.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log(meanings);\n  useEffect(() => {\n    dictionaryApi(); // eslint-disable-next-line\n  }, [word, category]);\n  const PurpleSwitch = withStyles({\n    switchBase: {\n      color: grey[50],\n      \"&$checked\": {\n        color: grey[900]\n      },\n      \"&$checked + $track\": {\n        backgroundColor: grey[500]\n      }\n    },\n    checked: {},\n    track: {}\n  })(Switch);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      height: \"100vh\",\n      backgroundColor: LightTheme ? \"#fff\" : \"#282c34\",\n      color: LightTheme ? \"black\" : \"white\",\n      transition: \"all 0.5s linear\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100vh\",\n        justifyContent: \"space-evenly\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 0,\n          right: 15,\n          paddingTop: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [LightTheme ? \"Dark\" : \"Light\", \" Mode\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PurpleSwitch, {\n          checked: LightTheme,\n          onChange: () => setLightTheme(!LightTheme)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header, {\n        setWord: setWord,\n        category: category,\n        setCategory: setCategory,\n        word: word,\n        setMeanings: setMeanings,\n        LightTheme: LightTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), meanings && /*#__PURE__*/_jsxDEV(Definitions, {\n        meanings: meanings,\n        word: word,\n        LightTheme: LightTheme,\n        category: category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ISDamKZhk2bkluprXccCqXOTRUc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mac/Desktop/Lexicon/src/App.js"],"names":["Container","Switch","withStyles","grey","axios","useEffect","useState","Definitions","Footer","Header","App","word","setWord","meanings","setMeanings","category","setCategory","LightTheme","setLightTheme","dictionaryApi","data","get","error","console","log","PurpleSwitch","switchBase","color","backgroundColor","checked","track","height","transition","display","flexDirection","justifyContent","position","top","right","paddingTop"],"mappings":"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","sourcesContent":["import { Container, Switch, withStyles } from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Definitions from \"./components/Definitions/Definitions\";\nimport Footer from \"./components/Footer/Footer\";\nimport Header from \"./components/Header/Header\";\n\nfunction App() {\n  const [word, setWord] = useState(\"\");\n  const [meanings, setMeanings] = useState([]);\n  const [category, setCategory] = useState(\"en\");\n  const [LightTheme, setLightTheme] = useState(false);\n\n  const dictionaryApi = async () => {\n    try {\n      const data = await axios.get(\n        `https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`\n      );\n      setMeanings(data.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log(meanings);\n\n  useEffect(() => {\n    dictionaryApi();\n    // eslint-disable-next-line\n  }, [word, category]);\n\n  const PurpleSwitch = withStyles({\n    switchBase: {\n      color: grey[50],\n      \"&$checked\": {\n        color: grey[900],\n      },\n      \"&$checked + $track\": {\n        backgroundColor: grey[500],\n      },\n    },\n    checked: {},\n    track: {},\n  })(Switch);\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        height: \"100vh\",\n        backgroundColor: LightTheme ? \"#fff\" : \"#282c34\",\n        color: LightTheme ? \"black\" : \"white\",\n        transition: \"all 0.5s linear\",\n      }}\n    >\n      <Container\n        maxWidth=\"md\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"100vh\",\n          justifyContent: \"space-evenly\",\n        }}\n      >\n        <div\n          style={{ position: \"absolute\", top: 0, right: 15, paddingTop: 10 }}\n        >\n          <span>{LightTheme ? \"Dark\" : \"Light\"} Mode</span>\n          <PurpleSwitch\n            checked={LightTheme}\n            onChange={() => setLightTheme(!LightTheme)}\n          />\n        </div>\n        <Header\n          setWord={setWord}\n          category={category}\n          setCategory={setCategory}\n          word={word}\n          setMeanings={setMeanings}\n          LightTheme={LightTheme}\n        />\n        {meanings && (\n          <Definitions\n            meanings={meanings}\n            word={word}\n            LightTheme={LightTheme}\n            category={category}\n          />\n        )}\n      </Container>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}